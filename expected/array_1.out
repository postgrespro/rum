/*
 * ------------------------------------
 *  NOTE: This test behaves differenly
 * ------------------------------------
 *
 * array.out - test output for 64-bit systems and
 * array_1.out - test output for 32-bit systems.
 *
 * Since c01743aa486 and 161320b4b96 (>=18) EXPLAIN output was changed,
 * now it shows whether nodes are disabled.
 *
 * array_2.out - test output for 64-bit systems (>=18).
 * array_3.out - test output for 32-bit systems (>=18).
 *
 */
set enable_seqscan=off;
set enable_sort=off;
/*
 * Complete checks for int2[].
 */
CREATE TABLE test_array (
	i int2[]
);
INSERT INTO test_array VALUES ('{}'), ('{0}'), ('{1,2,3,4}'), ('{1,2,3}'), ('{1,2}'), ('{1}');
CREATE INDEX idx_array ON test_array USING rum (i rum_anyarray_ops);
SELECT NULL::int[] = '{1}';
 ?column? 
----------
 
(1 row)

SELECT NULL::int[] && '{1}';
 ?column? 
----------
 
(1 row)

SELECT NULL::int[] @> '{1}';
 ?column? 
----------
 
(1 row)

SELECT NULL::int[] <@ '{1}';
 ?column? 
----------
 
(1 row)

SELECT NULL::int[] % '{1}';
 ?column? 
----------
 
(1 row)

SELECT NULL::int[] <=> '{1}';
 ?column? 
----------
         
(1 row)

INSERT INTO test_array VALUES (NULL);
SELECT * FROM test_array WHERE i = '{1}';
  i  
-----
 {1}
(1 row)

DELETE FROM test_array WHERE i IS NULL;
SELECT * FROM test_array WHERE i = '{NULL}';
ERROR:  array must not contain nulls
SELECT * FROM test_array WHERE i = '{1,2,3,NULL}';
ERROR:  array must not contain nulls
SELECT * FROM test_array WHERE i = '{{1,2},{3,4}}';
ERROR:  array must have 1 dimension
EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i = '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i = '{}'::smallint[])
(2 rows)

SELECT * FROM test_array WHERE i = '{}';
 i  
----
 {}
(1 row)

SELECT * FROM test_array WHERE i = '{0}';
  i  
-----
 {0}
(1 row)

SELECT * FROM test_array WHERE i = '{1}';
  i  
-----
 {1}
(1 row)

SELECT * FROM test_array WHERE i = '{1,2}';
   i   
-------
 {1,2}
(1 row)

SELECT * FROM test_array WHERE i = '{2,1}';
 i 
---
(0 rows)

SELECT * FROM test_array WHERE i = '{1,2,3,3}';
 i 
---
(0 rows)

SELECT * FROM test_array WHERE i = '{0,0}';
 i 
---
(0 rows)

SELECT * FROM test_array WHERE i = '{100}';
 i 
---
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i && '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i && '{}'::smallint[])
(2 rows)

SELECT * FROM test_array WHERE i && '{}';
 i 
---
(0 rows)

SELECT * FROM test_array WHERE i && '{1}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(4 rows)

SELECT * FROM test_array WHERE i && '{2}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
(3 rows)

SELECT * FROM test_array WHERE i && '{3}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
(2 rows)

SELECT * FROM test_array WHERE i && '{4}';
     i     
-----------
 {1,2,3,4}
(1 row)

SELECT * FROM test_array WHERE i && '{1,2}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(4 rows)

SELECT * FROM test_array WHERE i && '{1,2,3}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(4 rows)

SELECT * FROM test_array WHERE i && '{1,2,3,4}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(4 rows)

SELECT * FROM test_array WHERE i && '{4,3,2,1}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(4 rows)

SELECT * FROM test_array WHERE i && '{0,0}';
  i  
-----
 {0}
(1 row)

SELECT * FROM test_array WHERE i && '{100}';
 i 
---
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i @> '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i @> '{}'::smallint[])
(2 rows)

SELECT * FROM test_array WHERE i @> '{}';
     i     
-----------
 {}
 {0}
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(6 rows)

SELECT * FROM test_array WHERE i @> '{1}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(4 rows)

SELECT * FROM test_array WHERE i @> '{2}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
(3 rows)

SELECT * FROM test_array WHERE i @> '{3}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
(2 rows)

SELECT * FROM test_array WHERE i @> '{4}';
     i     
-----------
 {1,2,3,4}
(1 row)

SELECT * FROM test_array WHERE i @> '{1,2,4}';
     i     
-----------
 {1,2,3,4}
(1 row)

SELECT * FROM test_array WHERE i @> '{1,2,3,4}';
     i     
-----------
 {1,2,3,4}
(1 row)

SELECT * FROM test_array WHERE i @> '{4,3,2,1}';
     i     
-----------
 {1,2,3,4}
(1 row)

SELECT * FROM test_array WHERE i @> '{0,0}';
  i  
-----
 {0}
(1 row)

SELECT * FROM test_array WHERE i @> '{100}';
 i 
---
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i <@ '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i <@ '{}'::smallint[])
(2 rows)

SELECT * FROM test_array WHERE i <@ '{}';
 i  
----
 {}
(1 row)

SELECT * FROM test_array WHERE i <@ '{1}';
  i  
-----
 {}
 {1}
(2 rows)

SELECT * FROM test_array WHERE i <@ '{2}';
 i  
----
 {}
(1 row)

SELECT * FROM test_array WHERE i <@ '{1,2,4}';
   i   
-------
 {}
 {1,2}
 {1}
(3 rows)

SELECT * FROM test_array WHERE i <@ '{1,2,3,4}';
     i     
-----------
 {}
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(5 rows)

SELECT * FROM test_array WHERE i <@ '{4,3,2,1}';
     i     
-----------
 {}
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(5 rows)

SELECT * FROM test_array WHERE i <@ '{0,0}';
  i  
-----
 {}
 {0}
(2 rows)

SELECT * FROM test_array WHERE i <@ '{100}';
 i  
----
 {}
(1 row)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i % '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i % '{}'::smallint[])
(2 rows)

SELECT * FROM test_array WHERE i % '{}';
 i 
---
(0 rows)

SELECT * FROM test_array WHERE i % '{1}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(4 rows)

SELECT * FROM test_array WHERE i % '{2}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
(3 rows)

SELECT * FROM test_array WHERE i % '{1,2}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(4 rows)

SELECT * FROM test_array WHERE i % '{1,2,4}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(4 rows)

SELECT * FROM test_array WHERE i % '{1,2,3,4}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(4 rows)

SELECT * FROM test_array WHERE i % '{4,3,2,1}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(4 rows)

SELECT * FROM test_array WHERE i % '{1,2,3,4,5}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
(3 rows)

SELECT * FROM test_array WHERE i % '{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}';
     i     
-----------
 {1,2,3,4}
(1 row)

SELECT * FROM test_array WHERE i % '{1,10,20,30,40,50}';
 i 
---
(0 rows)

SELECT * FROM test_array WHERE i % '{1,10,20,30}';
  i  
-----
 {1}
(1 row)

SELECT * FROM test_array WHERE i % '{1,1,1,1,1}';
     i     
-----------
 {1,2,3,4}
 {1,2,3}
 {1,2}
 {1}
(4 rows)

SELECT * FROM test_array WHERE i % '{0,0}';
  i  
-----
 {0}
(1 row)

SELECT * FROM test_array WHERE i % '{100}';
 i 
---
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i && '{1}' ORDER BY i <=> '{1}' ASC;
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i && '{1}'::smallint[])
   Order By: (i <=> '{1}'::smallint[])
(3 rows)

SELECT * FROM test_array WHERE i && '{1}' ORDER BY i <=> '{1}' ASC;
     i     
-----------
 {1}
 {1,2}
 {1,2,3}
 {1,2,3,4}
(4 rows)

DROP INDEX idx_array;
ALTER TABLE test_array ADD COLUMN add_info timestamp;
CREATE INDEX idx_array ON test_array
USING rum (i rum_anyarray_addon_ops, add_info)
WITH (attach = 'add_info', to = 'i');
WITH q as (
     SELECT row_number() OVER (ORDER BY i) idx, ctid FROM test_array
)
UPDATE test_array SET add_info = '2016-05-16 14:21:25'::timestamp +
								 format('%s days', q.idx)::interval
FROM q WHERE test_array.ctid = q.ctid;
EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i = '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i = '{}'::smallint[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i && '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i && '{}'::smallint[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i @> '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i @> '{}'::smallint[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i <@ '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i <@ '{}'::smallint[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i % '{}';
            QUERY PLAN            
----------------------------------
 Seq Scan on test_array
   Filter: (i % '{}'::smallint[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i && '{1}' ORDER BY add_info <=> '2016-05-16 14:21:25' LIMIT 10;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Limit
   ->  Index Scan using idx_array on test_array
         Index Cond: (i && '{1}'::smallint[])
         Order By: (add_info <=> 'Mon May 16 14:21:25 2016'::timestamp without time zone)
(4 rows)

SELECT * FROM test_array WHERE i && '{1}' ORDER BY add_info <=> '2016-05-16 14:21:25' LIMIT 10;
ERROR:  doesn't support order by over pass-by-reference column
DROP INDEX idx_array;
/*
 * Sanity checks for popular array types.
 */
ALTER TABLE test_array ALTER COLUMN i TYPE int4[];
CREATE INDEX idx_array ON test_array USING rum (i rum_anyarray_ops);
EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i = '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i = '{}'::integer[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i && '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i && '{}'::integer[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i @> '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i @> '{}'::integer[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i <@ '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i <@ '{}'::integer[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i % '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i % '{}'::integer[])
(2 rows)

DROP INDEX idx_array;
ALTER TABLE test_array ALTER COLUMN i TYPE int8[];
CREATE INDEX idx_array ON test_array USING rum (i rum_anyarray_ops);
EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i = '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i = '{}'::bigint[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i && '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i && '{}'::bigint[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i @> '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i @> '{}'::bigint[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i <@ '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i <@ '{}'::bigint[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i % '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i % '{}'::bigint[])
(2 rows)

DROP INDEX idx_array;
ALTER TABLE test_array ALTER COLUMN i TYPE text[];
CREATE INDEX idx_array ON test_array USING rum (i rum_anyarray_ops);
EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i = '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i = '{}'::text[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i && '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i && '{}'::text[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i @> '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i @> '{}'::text[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i <@ '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i <@ '{}'::text[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i % '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i % '{}'::text[])
(2 rows)

DROP INDEX idx_array;
ALTER TABLE test_array ALTER COLUMN i TYPE varchar[];
CREATE INDEX idx_array ON test_array USING rum (i rum_anyarray_ops);
EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i = '{}';
                  QUERY PLAN                   
-----------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i = '{}'::character varying[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i && '{}';
                   QUERY PLAN                   
------------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i && '{}'::character varying[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i @> '{}';
                   QUERY PLAN                   
------------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i @> '{}'::character varying[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i <@ '{}';
                   QUERY PLAN                   
------------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i <@ '{}'::character varying[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i % '{}';
                  QUERY PLAN                   
-----------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i % '{}'::character varying[])
(2 rows)

DROP INDEX idx_array;
ALTER TABLE test_array ALTER COLUMN i TYPE char[];
CREATE INDEX idx_array ON test_array USING rum (i rum_anyarray_ops);
EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i = '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i = '{}'::bpchar[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i && '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i && '{}'::bpchar[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i @> '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i @> '{}'::bpchar[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i <@ '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i <@ '{}'::bpchar[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i % '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i % '{}'::bpchar[])
(2 rows)

DROP INDEX idx_array;
ALTER TABLE test_array ALTER COLUMN i TYPE numeric[] USING i::numeric[];
CREATE INDEX idx_array ON test_array USING rum (i rum_anyarray_ops);
EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i = '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i = '{}'::numeric[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i && '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i && '{}'::numeric[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i @> '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i @> '{}'::numeric[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i <@ '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i <@ '{}'::numeric[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i % '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i % '{}'::numeric[])
(2 rows)

DROP INDEX idx_array;
ALTER TABLE test_array ALTER COLUMN i TYPE float4[] USING i::float4[];
CREATE INDEX idx_array ON test_array USING rum (i rum_anyarray_ops);
EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i = '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i = '{}'::real[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i && '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i && '{}'::real[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i @> '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i @> '{}'::real[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i <@ '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i <@ '{}'::real[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i % '{}';
                QUERY PLAN                
------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i % '{}'::real[])
(2 rows)

DROP INDEX idx_array;
ALTER TABLE test_array ALTER COLUMN i TYPE float8[] USING i::float8[];
CREATE INDEX idx_array ON test_array USING rum (i rum_anyarray_ops);
EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i = '{}';
                  QUERY PLAN                  
----------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i = '{}'::double precision[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i && '{}';
                  QUERY PLAN                   
-----------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i && '{}'::double precision[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i @> '{}';
                  QUERY PLAN                   
-----------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i @> '{}'::double precision[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i <@ '{}';
                  QUERY PLAN                   
-----------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i <@ '{}'::double precision[])
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM test_array WHERE i % '{}';
                  QUERY PLAN                  
----------------------------------------------
 Index Scan using idx_array on test_array
   Index Cond: (i % '{}'::double precision[])
(2 rows)

DROP INDEX idx_array;
/*
 * Check ordering using distance operator
 *
 * We want to check that index scan provides us correct ordering by distance
 * operator. File 'data/rum_array.data' contains two arrays that statisfy
 * i @> '{23,20}' and have finite distance i <=> '{51}', and a bunch of arrays
 * that statisfy i @> '{23,20}' and have infinite distance i <=> '{51}'.
 *
 * When ordering by distance the order of this bunch of arrays with infinite
 * distance is not determined and may depend of PostgreSQL version and system.
 * We don't add another sort expression to ORDER BY because that might cause
 * the planner to avoid using the index. Instead, we replace arrays that have
 * infinite distance with {-1} to unambiguously determine the test output.
 *
 * 'Infinity' is printed differently in the output in different PostgreSQL
 * versions, so we replace it with -1.
 */
CREATE TABLE test_array_order (
    i int2[]
);
\copy test_array_order(i) from 'data/rum_array.data';
CREATE INDEX idx_array_order ON test_array_order USING rum (i rum_anyarray_ops);
/*
 * Check that plan of the query uses ordering provided by index scan
 */
EXPLAIN (COSTS OFF)
SELECT
	CASE WHEN distance = 'Infinity' THEN '{-1}'
		ELSE i
	END i,
	CASE WHEN distance = 'Infinity' THEN -1
		ELSE distance::numeric(18,14)
	END distance
	FROM
		(SELECT *, (i <=> '{51}') AS distance
		FROM test_array_order WHERE i @> '{23,20}' ORDER BY distance) t;
                         QUERY PLAN                         
------------------------------------------------------------
 Subquery Scan on t
   ->  Index Scan using idx_array_order on test_array_order
         Index Cond: (i @> '{23,20}'::smallint[])
         Order By: (i <=> '{51}'::smallint[])
(4 rows)

SELECT
	CASE WHEN distance = 'Infinity' THEN '{-1}'
		ELSE i
	END i,
	CASE WHEN distance = 'Infinity' THEN -1
		ELSE distance::numeric(18,14)
	END distance
	FROM
		(SELECT *, (i <=> '{51}') AS distance
		FROM test_array_order WHERE i @> '{23,20}' ORDER BY distance) t;
          i          |     distance     
---------------------+------------------
 {20,23,51}          | 1.73205080756888
 {33,51,20,77,23,65} | 2.44948974278318
 {-1}                |               -1
 {-1}                |               -1
 {-1}                |               -1
 {-1}                |               -1
 {-1}                |               -1
 {-1}                |               -1
 {-1}                |               -1
 {-1}                |               -1
 {-1}                |               -1
 {-1}                |               -1
(12 rows)

